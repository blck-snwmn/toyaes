package toyaes

import (
	"encoding/binary"
)

// Kb: word number (paintext)
// Nk: Word number (key)
// Nr: round number
// 1word= 4byte = 32bit
// input is 4*4 byte

var sbox = []byte{
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
}

func subBytes(state []byte) {
	for i := 0; i < len(state); i++ {
		state[i] = sbox[state[i]]
	}
}

func shiftRows(state []byte) {
	state[1], state[5], state[9], state[13] = state[5], state[9], state[13], state[1]
	state[2], state[6], state[10], state[14] = state[10], state[14], state[2], state[6]
	state[3], state[7], state[11], state[15] = state[15], state[3], state[7], state[11]
}

func shift(state []byte, count int) {
	for i := 0; i < count; i++ {
		state[3], state[0], state[1], state[2] = state[0], state[1], state[2], state[3]
	}
}

// func add(x, y byte) byte {
// 	return x ^ y
// }

// 11011
// 1b

func mul(x, y byte) byte {
	sum := byte(0)
	for i := 0; i < 8; i++ {
		if y&1 == 1 {
			sum ^= x // add
		}
		msb := x & 0x80
		x <<= 1
		if msb == 0x80 {
			x ^= 0x1b // add
		}
		y >>= 1
	}
	return sum
}

var tmp = make([]byte, 16)

func mixColumns(state []byte) {
	// add is xor
	for i := 0; i < 4; i++ {
		tmp[i*4] = mul(0x02, state[i*4]) ^ mul(0x03, state[i*4+1]) ^ state[i*4+2] ^ state[i*4+3]
		tmp[i*4+1] = state[i*4] ^ mul(0x02, state[i*4+1]) ^ mul(0x03, state[i*4+2]) ^ state[i*4+3]
		tmp[i*4+2] = state[i*4] ^ state[i*4+1] ^ mul(0x02, state[i*4+2]) ^ mul(0x03, state[i*4+3])
		tmp[i*4+3] = mul(0x03, state[i*4]) ^ state[i*4+1] ^ state[i*4+2] ^ mul(0x02, state[i*4+3])
	}
	copy(state, tmp)
}

var addrktmp = make([]byte, 16)

func addRoundKey(state []byte, word []uint32) {
	binary.BigEndian.PutUint32(addrktmp[0:4], word[0])
	binary.BigEndian.PutUint32(addrktmp[4:8], word[1])
	binary.BigEndian.PutUint32(addrktmp[8:12], word[2])
	binary.BigEndian.PutUint32(addrktmp[12:16], word[3])
	for i := 0; i < len(state); i++ {
		state[i] ^= addrktmp[i]
	}
}

const nb = 4

func cipher(input, out []byte, word []uint32) {
	if len(input) != 4*nb {
		panic("invalid length")
	}
	if len(out) != 4*nb {
		panic("invalid length")
	}

	nr := 10 // AES-126

	state := make([]byte, 16)
	copy(state, input)

	addRoundKey(state, word[0:nb])
	for i := 1; i < nr; i++ {
		subBytes(state)
		shiftRows(state)
		mixColumns(state)
		addRoundKey(state, word[i*nb:(i+1)*nb]) // (i+1)*nb = i*nb + nb
	}
	subBytes(state)
	shiftRows(state)
	addRoundKey(state, word[nr*nb:(nr+1)*nb]) // (nr+1)*nb = nr*nb + nb

	// result
	copy(out, state)
}

var powx = [16]byte{
	0x01,
	0x02,
	0x04,
	0x08,
	0x10,
	0x20,
	0x40,
	0x80,
	0x1b,
	0x36,
	0x6c,
	0xd8,
	0xab,
	0x4d,
	0x9a,
	0x2f,
}

func rotWord(w uint32) uint32 { return w<<8 | w>>24 }

var sbwtmp = make([]byte, 4)

func subWord(w uint32) uint32 {
	binary.BigEndian.PutUint32(sbwtmp, w)
	subBytes(sbwtmp)
	return binary.BigEndian.Uint32(sbwtmp)
}

func keyExpansion(key []byte, word []uint32) {
	nk := len(key) / 4 // 4,6,8
	for i := 0; i < nk; i++ {
		word[i] = binary.BigEndian.Uint32(key[4*i : 4*(i+1)])
	}
	var nr int
	switch nk {
	case 4:
		nr = 10
	case 6:
		nr = 12
	case 8:
		nr = 14
	}
	for i := nk; i < nb*(nr+1); i++ {
		tmp := word[i-1]
		switch {
		case i%nk == 0:
			afterRot := rotWord(tmp)
			afterSub := subWord(afterRot)
			rcon := (uint32(powx[i/nk-1]) << 24) // TODO ここの計算について再確認
			tmp = afterSub ^ rcon
		case nk > 6 && i%nk == 4:
			tmp = subWord(tmp)
		default:
		}
		word[i] = word[i-nk] ^ tmp
	}
}

type toyAES struct {
	word []uint32
}

func NewToyAES(key []byte) *toyAES {
	nk := len(key) / 4 // 4,6,8
	var nr int
	switch nk {
	case 4:
		nr = 10
	case 6:
		nr = 12
	case 8:
		nr = 14
	default:
		panic("invalid key length")
	}
	word := make([]uint32, nb*(nr+1))
	keyExpansion(key, word)
	return &toyAES{
		word: word,
	}
}

func (c *toyAES) Encrypt(dst, src []byte) {
	cipher(src, dst, c.word)
}
